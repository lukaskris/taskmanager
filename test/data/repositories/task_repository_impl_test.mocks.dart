// Mocks generated by Mockito 5.4.5 from annotations
// in taskmanager/test/data/repositories/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_database/firebase_database.dart' as _i2;
import 'package:hive/hive.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:taskmanager/core/secure_storage_service.dart' as _i8;
import 'package:taskmanager/core/service/connectivity_service.dart' as _i9;
import 'package:taskmanager/data/datasources/local/task_local_data_source.dart'
    as _i7;
import 'package:taskmanager/data/datasources/remote/task_remote_data_source.dart'
    as _i4;
import 'package:taskmanager/data/models/task_model.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseDatabase_0 extends _i1.SmartFake
    implements _i2.FirebaseDatabase {
  _FakeFirebaseDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHiveInterface_1 extends _i1.SmartFake implements _i3.HiveInterface {
  _FakeHiveInterface_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskRemoteDataSource extends _i1.Mock
    implements _i4.TaskRemoteDataSource {
  MockTaskRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseDatabase get firebaseDatabase => (super.noSuchMethod(
        Invocation.getter(#firebaseDatabase),
        returnValue: _FakeFirebaseDatabase_0(
          this,
          Invocation.getter(#firebaseDatabase),
        ),
      ) as _i2.FirebaseDatabase);

  @override
  _i5.Future<List<_i6.TaskModel>> fetchTasks(
    String? userId, {
    _i6.TaskStatus? taskStatus,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [userId],
          {#taskStatus: taskStatus},
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);

  @override
  _i5.Future<void> addTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> updateTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTask(
    String? userId,
    String? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [
            userId,
            id,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [TaskLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskLocalDataSource extends _i1.Mock
    implements _i7.TaskLocalDataSource {
  MockTaskLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.HiveInterface get hive => (super.noSuchMethod(
        Invocation.getter(#hive),
        returnValue: _FakeHiveInterface_1(
          this,
          Invocation.getter(#hive),
        ),
      ) as _i3.HiveInterface);

  @override
  _i5.Future<void> cacheTasks(List<_i6.TaskModel>? tasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheTasks,
          [tasks],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i6.TaskModel>> getCachedTasks() => (super.noSuchMethod(
        Invocation.method(
          #getCachedTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);

  @override
  _i5.Future<List<_i6.TaskModel>> getPendingTasks() => (super.noSuchMethod(
        Invocation.method(
          #getPendingTasks,
          [],
        ),
        returnValue: _i5.Future<List<_i6.TaskModel>>.value(<_i6.TaskModel>[]),
      ) as _i5.Future<List<_i6.TaskModel>>);

  @override
  _i5.Future<void> updateTask(_i6.TaskModel? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<String>> getDeletedTasksIds() => (super.noSuchMethod(
        Invocation.method(
          #getDeletedTasksIds,
          [],
        ),
        returnValue: _i5.Future<List<String>>.value(<String>[]),
      ) as _i5.Future<List<String>>);

  @override
  _i5.Future<void> clearDeletedTasksIds() => (super.noSuchMethod(
        Invocation.method(
          #clearDeletedTasksIds,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [SecureStorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSecureStorageService extends _i1.Mock
    implements _i8.SecureStorageService {
  MockSecureStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveUser(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #saveUser,
          [userId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<String?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [ConnectivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivityService extends _i1.Mock
    implements _i9.ConnectivityService {
  MockConnectivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<bool> get connectivityStream => (super.noSuchMethod(
        Invocation.getter(#connectivityStream),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
